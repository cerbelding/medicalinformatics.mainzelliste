package de.pseudonymisierung.mainzelliste.matcher.hasher;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;

/**
 * Represent a Hasher, which generates and compares hashes based on the
 * Nilsimsa algorithm.
 * @see Nilsimsa.java
 *
 * @author Christopher Hampf
 */
public class NilsimsaHasher implements Hasher
{
    /* POPC[x] is the number of 1's in the binary representation of x. */
    private static final byte[] POPC = new byte[] {
        0x00, 0x01, 0x01, 0x02, 0x01, 0x02, 0x02, 0x03, 0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
        0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
        0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
        0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
        0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
        0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
        0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
        0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
        0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
        0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
        0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
        0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
        0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
        0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
        0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
        0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08
    };
    
    /**
     * Generate an instance of NilsimsaHasher.
     */
    public NilsimsaHasher()
    {
    }
    
    /**
     * Generate a hash based on Nilsimsa algorithm from the given string.
     * The given input data should be formatted.
     *
     * @param input Formatted input data
     * 
     * @return Nilsimsa hash depending on given input data
     */
    @Override
    public String generate(String input)
    {
        Nilsimsa hash = new Nilsimsa();
        hash.update(input);
        
        return hash.hexdigest();
    }

    /**
     * Compares two given hashes on similarity. The return is a score which represent
     * the similarity of both hashes. If the similarity is 100% (the hashes are the same),
     * then it returns 128. If there is no similarity, the return is -127. If one of the 
     * hashes is NULL or an error is occurred, it returns -128.
     * 
     * @param firstHash
     * @param secondHash
     * 
     * @return Calculated score between 128 and -127 or -128 if an error occurred.
     */
    @Override
    public int compare(String firstHash, String secondHash)
    {
        if (firstHash == null || secondHash == null)
            return -128;
        
        byte[] n1 = null;
        byte[] n2 = null;
        
        try
        {
            n1 = Hex.decodeHex(firstHash.toCharArray());
            n2 = Hex.decodeHex(secondHash.toCharArray());
        }
        catch (DecoderException d)
        {
            return -128;
        }
        
        int bits = 0;

        for (int i = 0; i < 32; i++)
            bits += POPC[255 & (n1[i] ^ n2[i])];
        
        return 128 - bits;
    }
}
