{
	"info": {
		"_postman_id": "b516167b-9ddf-4291-8dd3-73d8a1d33cd7",
		"name": "mainzelliste_getAllPatiens_with_idType",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "NEW_SESSION - Sitzung anlegen (DEFINING ITERATION VARIABLES)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bae37559-74e4-4e9b-9ff2-0515ae0e171c",
						"exec": [
							"console.log(\"New Session\")",
							"",
							"var jsonBody = JSON.parse(responseBody);",
							"console.log(jsonBody);",
							"tests[\"Session created\"] = responseCode.code === 201;",
							"tests[\"Body has sessionId\"] = responseBody.has(\"sessionId\");",
							"tests[\"Body has uri\"] = responseBody.has(\"uri\");",
							"",
							"var sessionId = jsonBody.sessionId;",
							"postman.clearGlobalVariable(\"sessionId\");",
							"postman.setGlobalVariable(\"sessionId\", sessionId);",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d3ff9f7d-8c35-41ab-baa5-0f0576a70090",
						"exec": [
							"pm.collectionVariables.set('addPatientsPointer', 0);",
							"pm.collectionVariables.set('readPatientsPointer', 0);",
							"    ",
							"pm.collectionVariables.unset('patients');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"url": {
					"raw": "{{url}}/sessions",
					"host": [
						"{{url}}"
					],
					"path": [
						"sessions"
					]
				}
			},
			"response": []
		},
		{
			"name": "NEW_TOKEN (addPatient) - Token anlegen",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c357cae5-7298-4ed0-9c9d-151d07f08846",
						"exec": [
							"console.log(\"New TOKEN (addPatient)\")",
							"var jsonBody;",
							"pm.collectionVariables.unset(\"tokenId\");",
							"",
							"",
							"",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"properties\": {",
							"            \"id\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"type\":{",
							"                \"type\": \"string\",",
							"                \"pattern\": \"addPatient\"",
							"            },",
							"            \"data\": {",
							"                \"type\": \"object\",",
							"                 \"required\": [\"idTypes\"]",
							"            },",
							"            \"uri\": {",
							"                \"type\": \"string\"",
							"            }",
							"        }",
							"    };",
							"",
							"",
							"",
							"",
							"pm.test('response must be valid and have a body', function() {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"     ",
							"    ",
							"});",
							"",
							"pm.test(\"response have correct scheme\", function() {",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"    jsonBody = localBody;",
							"    ",
							"});",
							"",
							"pm.test('response header have correct scheme', function(){",
							"    pm.expect(pm.response.headers.has('Location')).to.be.true;",
							"})",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"if(jsonBody){",
							"    var tokenId = jsonBody.id;",
							"    pm.collectionVariables.set(\"tokenId\",tokenId);",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f07dcd09-baf9-464a-9475-635bba271814",
						"exec": [
							"var externalData =  pm.variables.get('ADD_PATIENTS_DATA');",
							"var patientsPointer = (pm.variables.get('addPatientsPointer'));",
							"",
							"",
							"",
							"",
							"if(typeof(externalData) ==\"object\" && typeof(patientsPointer) == 'number' ){",
							"    ",
							" ",
							"   ",
							"    var patient = externalData[patientsPointer];",
							"    ",
							"   ",
							"    Object.keys(patient).forEach(key=> {",
							"      ",
							"        pm.variables.set(key, patient[key]);",
							"",
							"        ",
							"    });",
							"    ",
							"     ",
							"     ",
							"    ",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"type\": \"addPatient\",\r\n     \t\"data\": {\r\n     \t\t\"idtypes\": [{{idTypes}}]\r\n    \t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/sessions/{{sessionId}}/tokens",
					"host": [
						"{{url}}"
					],
					"path": [
						"sessions",
						"{{sessionId}}",
						"tokens"
					]
				}
			},
			"response": []
		},
		{
			"name": "ADD_PATIENT (JSON) - Patienten anlegen",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a514f2de-b015-440b-a2c1-a15c0f56cfe3",
						"exec": [
							"//Deleting unnecessary keys",
							"var addPatientData =  pm.variables.get('ADD_PATIENTS_DATA');",
							"var addPatientsPointer = pm.variables.get('addPatientsPointer');",
							"",
							"",
							"",
							"if(addPatientData && typeof(addPatientsPointer) === 'number' ){",
							"",
							"    var patient = addPatientData[addPatientsPointer];",
							"    ",
							"   ",
							"    Object.keys(patient).forEach(key=> {",
							"      ",
							"        pm.variables.unset(key);",
							"",
							"        ",
							"    });",
							"    addPatientsPointer++;",
							"    pm.collectionVariables.set('addPatientsPointer', addPatientsPointer);",
							"",
							"",
							"}",
							"//Test begins here",
							"",
							"var jsonBody;",
							"",
							"",
							" var innerArraySchema = {",
							"         \"type\": \"object\",",
							"            \"required\": [\"idType\", \"idString\", \"tentative\", \"uri\"],",
							"            \"properties\":  ",
							"            {",
							"                \"idType\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"idString\":{",
							"                    \"type\": \"string\",",
							"                },",
							"                \"tentative\": {",
							"                    \"type\": \"boolean\",",
							"                },",
							"                \"uri\": {",
							"                    \"type\": \"string\"",
							"                }",
							"            }",
							"        ",
							"    }",
							"",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"type\": \"array\",",
							"       \"items\" : {",
							"                \"#ref\": innerArraySchema",
							"           ",
							"       }};",
							"            ",
							"            ",
							"   ",
							"",
							"",
							"",
							"pm.test('response must be valid and have a body', function() {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"     ",
							"    ",
							"});",
							"",
							"",
							"pm.test(\"response have correct scheme\", function() {",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"    jsonBody = localBody;",
							"    console.log(jsonBody);",
							"    ",
							"    ",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"if(jsonBody){",
							"  ",
							"   ",
							"    var patients = pm.variables.get(\"patients\");",
							"    ",
							"   ",
							"    ",
							"    ",
							"    if(!patients){",
							"         ",
							"        patients = []",
							"    }",
							"    ",
							"    var ids = jsonBody",
							"    ",
							"  ",
							"    ",
							"    newPatient = {",
							"        ",
							"        \"ids\": ids,",
							"        \"fields\":request.data",
							"      ",
							"    }",
							"    ",
							"    ",
							"    ",
							"    patients.push(newPatient);",
							"    pm.collectionVariables.set('patients', patients);",
							"    pm.collectionVariables.set('idString', jsonBody[0].idString);",
							"  ",
							"    ",
							"    ",
							"}",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "10ce7dd4-4a0f-4865-ac48-72c756407c5c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "vorname",
							"value": "{{vorname}}",
							"type": "text"
						},
						{
							"key": "nachname",
							"value": "{{nachname}}",
							"type": "text"
						},
						{
							"key": "geburtsname",
							"value": "{{geburtsname}}",
							"type": "text"
						},
						{
							"key": "geburtstag",
							"value": "{{geburtstag}}",
							"type": "text"
						},
						{
							"key": "geburtsmonat",
							"value": "{{geburtsmonat}}",
							"type": "text"
						},
						{
							"key": "geburtsjahr",
							"value": "{{geburtsjahr}}",
							"type": "text"
						},
						{
							"key": "plz",
							"value": "{{plz}}",
							"type": "text"
						},
						{
							"key": "ort",
							"value": "{{ort}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/patients?tokenId={{tokenId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"patients"
					],
					"query": [
						{
							"key": "tokenId",
							"value": "{{tokenId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NEW_TOKEN (addPatient) - Token anlegen",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "675226d9-19b1-49df-a0de-50301722be18",
						"exec": [
							"console.log(\"New TOKEN (addPatient)\")",
							"var jsonBody;",
							"pm.collectionVariables.unset(\"tokenId\");",
							"",
							"",
							"",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"properties\": {",
							"            \"id\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"type\":{",
							"                \"type\": \"string\",",
							"                \"pattern\": \"addPatient\"",
							"            },",
							"            \"data\": {",
							"                \"type\": \"object\",",
							"                 \"required\": [\"idTypes\"]",
							"            },",
							"            \"uri\": {",
							"                \"type\": \"string\"",
							"            }",
							"        }",
							"    };",
							"",
							"",
							"",
							"",
							"pm.test('response must be valid and have a body', function() {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"     ",
							"    ",
							"});",
							"",
							"pm.test(\"response have correct scheme\", function() {",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"    jsonBody = localBody;",
							"    ",
							"});",
							"",
							"pm.test('response header have correct scheme', function(){",
							"    pm.expect(pm.response.headers.has('Location')).to.be.true;",
							"})",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"if(jsonBody){",
							"    var tokenId = jsonBody.id;",
							"    pm.collectionVariables.set(\"tokenId\",tokenId);",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "153ae9c5-6604-46ec-bded-9d84e5e5ee69",
						"exec": [
							"var externalData =  pm.variables.get('ADD_PATIENTS_DATA');",
							"var patientsPointer = (pm.variables.get('addPatientsPointer'));",
							"",
							"",
							"",
							"",
							"if(typeof(externalData) ==\"object\" && typeof(patientsPointer) == 'number' ){",
							"    ",
							" ",
							"   ",
							"    var patient = externalData[patientsPointer];",
							"    ",
							"   ",
							"    Object.keys(patient).forEach(key=> {",
							"      ",
							"        pm.variables.set(key, patient[key]);",
							"",
							"        ",
							"    });",
							"    ",
							"     ",
							"     ",
							"    ",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"type\": \"addPatient\",\r\n     \t\"data\": {\r\n     \t\t\"idtypes\": [{{idTypes}}]\r\n    \t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/sessions/{{sessionId}}/tokens",
					"host": [
						"{{url}}"
					],
					"path": [
						"sessions",
						"{{sessionId}}",
						"tokens"
					]
				}
			},
			"response": []
		},
		{
			"name": "ADD_PATIENT (JSON) - Patienten anlegen",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b2dd0218-cd60-4c78-8b50-e501f6bb5092",
						"exec": [
							"//Deleting unnecessary keys",
							"var addPatientData =  pm.variables.get('ADD_PATIENTS_DATA');",
							"var addPatientsPointer = pm.variables.get('addPatientsPointer');",
							"",
							"",
							"",
							"if(addPatientData && typeof(addPatientsPointer) === 'number' ){",
							"",
							"    var patient = addPatientData[addPatientsPointer];",
							"    ",
							"   ",
							"    Object.keys(patient).forEach(key=> {",
							"      ",
							"        pm.variables.unset(key);",
							"",
							"        ",
							"    });",
							"    addPatientsPointer++;",
							"    pm.collectionVariables.set('addPatientsPointer', addPatientsPointer);",
							"",
							"",
							"}",
							"//Test begins here",
							"",
							"var jsonBody;",
							"",
							"",
							" var innerArraySchema = {",
							"         \"type\": \"object\",",
							"            \"required\": [\"idType\", \"idString\", \"tentative\", \"uri\"],",
							"            \"properties\":  ",
							"            {",
							"                \"idType\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"idString\":{",
							"                    \"type\": \"string\",",
							"                },",
							"                \"tentative\": {",
							"                    \"type\": \"boolean\",",
							"                },",
							"                \"uri\": {",
							"                    \"type\": \"string\"",
							"                }",
							"            }",
							"        ",
							"    }",
							"",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"type\": \"array\",",
							"       \"items\" : {",
							"                \"#ref\": innerArraySchema",
							"           ",
							"       }};",
							"            ",
							"            ",
							"   ",
							"",
							"",
							"",
							"pm.test('response must be valid and have a body', function() {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"     ",
							"    ",
							"});",
							"",
							"",
							"pm.test(\"response have correct scheme\", function() {",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"    jsonBody = localBody;",
							"    console.log(jsonBody);",
							"    ",
							"    ",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"if(jsonBody){",
							"  ",
							"   ",
							"    var patients = pm.variables.get(\"patients\");",
							"    ",
							"   ",
							"    ",
							"    ",
							"    if(!patients){",
							"         ",
							"        patients = []",
							"    }",
							"    ",
							"    var ids = jsonBody",
							"    ",
							"  ",
							"    ",
							"    newPatient = {",
							"        ",
							"        \"ids\": ids,",
							"        \"fields\":request.data",
							"      ",
							"    }",
							"    ",
							"    ",
							"    ",
							"    patients.push(newPatient);",
							"    pm.collectionVariables.set('patients', patients);",
							"    pm.collectionVariables.set('idString', jsonBody[0].idString);",
							"  ",
							"    ",
							"    ",
							"}",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9b8d8945-05fa-444a-97e1-d117e2553624",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "vorname",
							"value": "{{vorname}}",
							"type": "text"
						},
						{
							"key": "nachname",
							"value": "{{nachname}}",
							"type": "text"
						},
						{
							"key": "geburtsname",
							"value": "{{geburtsname}}",
							"type": "text"
						},
						{
							"key": "geburtstag",
							"value": "{{geburtstag}}",
							"type": "text"
						},
						{
							"key": "geburtsmonat",
							"value": "{{geburtsmonat}}",
							"type": "text"
						},
						{
							"key": "geburtsjahr",
							"value": "{{geburtsjahr}}",
							"type": "text"
						},
						{
							"key": "plz",
							"value": "{{plz}}",
							"type": "text"
						},
						{
							"key": "ort",
							"value": "{{ort}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/patients?tokenId={{tokenId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"patients"
					],
					"query": [
						{
							"key": "tokenId",
							"value": "{{tokenId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NEW_TOKEN (addPatient) - Token anlegen",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d35bd602-6a0f-4c30-9f41-995c6b9496ca",
						"exec": [
							"console.log(\"New TOKEN (addPatient)\")",
							"var jsonBody;",
							"pm.collectionVariables.unset(\"tokenId\");",
							"",
							"",
							"",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"properties\": {",
							"            \"id\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"type\":{",
							"                \"type\": \"string\",",
							"                \"pattern\": \"addPatient\"",
							"            },",
							"            \"data\": {",
							"                \"type\": \"object\",",
							"                 \"required\": [\"idTypes\"]",
							"            },",
							"            \"uri\": {",
							"                \"type\": \"string\"",
							"            }",
							"        }",
							"    };",
							"",
							"",
							"",
							"",
							"pm.test('response must be valid and have a body', function() {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"     ",
							"    ",
							"});",
							"",
							"pm.test(\"response have correct scheme\", function() {",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"    jsonBody = localBody;",
							"    ",
							"});",
							"",
							"pm.test('response header have correct scheme', function(){",
							"    pm.expect(pm.response.headers.has('Location')).to.be.true;",
							"})",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"if(jsonBody){",
							"    var tokenId = jsonBody.id;",
							"    pm.collectionVariables.set(\"tokenId\",tokenId);",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a5db9225-0d46-4933-8bdf-5d6c6c4ca3a0",
						"exec": [
							"var externalData =  pm.variables.get('ADD_PATIENTS_DATA');",
							"var patientsPointer = (pm.variables.get('addPatientsPointer'));",
							"",
							"",
							"",
							"",
							"if(typeof(externalData) ==\"object\" && typeof(patientsPointer) == 'number' ){",
							"    ",
							" ",
							"   ",
							"    var patient = externalData[patientsPointer];",
							"    ",
							"   ",
							"    Object.keys(patient).forEach(key=> {",
							"      ",
							"        pm.variables.set(key, patient[key]);",
							"",
							"        ",
							"    });",
							"    ",
							"     ",
							"     ",
							"    ",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"type\": \"addPatient\",\r\n     \t\"data\": {\r\n     \t\t\"idtypes\": [{{idTypes}}]\r\n    \t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/sessions/{{sessionId}}/tokens",
					"host": [
						"{{url}}"
					],
					"path": [
						"sessions",
						"{{sessionId}}",
						"tokens"
					]
				}
			},
			"response": []
		},
		{
			"name": "ADD_PATIENT (JSON) - Patienten anlegen",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa9df014-5d2a-410f-a4fc-98f49f6e4948",
						"exec": [
							"//Deleting unnecessary keys",
							"var addPatientData =  pm.variables.get('ADD_PATIENTS_DATA');",
							"var addPatientsPointer = pm.variables.get('addPatientsPointer');",
							"",
							"",
							"",
							"if(addPatientData && typeof(addPatientsPointer) === 'number' ){",
							"",
							"    var patient = addPatientData[addPatientsPointer];",
							"    ",
							"   ",
							"    Object.keys(patient).forEach(key=> {",
							"      ",
							"        pm.variables.unset(key);",
							"",
							"        ",
							"    });",
							"    addPatientsPointer++;",
							"    pm.collectionVariables.set('addPatientsPointer', addPatientsPointer);",
							"",
							"",
							"}",
							"//Test begins here",
							"",
							"var jsonBody;",
							"",
							"",
							" var innerArraySchema = {",
							"         \"type\": \"object\",",
							"            \"required\": [\"idType\", \"idString\", \"tentative\", \"uri\"],",
							"            \"properties\":  ",
							"            {",
							"                \"idType\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"idString\":{",
							"                    \"type\": \"string\",",
							"                },",
							"                \"tentative\": {",
							"                    \"type\": \"boolean\",",
							"                },",
							"                \"uri\": {",
							"                    \"type\": \"string\"",
							"                }",
							"            }",
							"        ",
							"    }",
							"",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"type\": \"array\",",
							"       \"items\" : {",
							"                \"#ref\": innerArraySchema",
							"           ",
							"       }};",
							"            ",
							"            ",
							"   ",
							"",
							"",
							"",
							"pm.test('response must be valid and have a body', function() {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"     ",
							"    ",
							"});",
							"",
							"",
							"pm.test(\"response have correct scheme\", function() {",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"    jsonBody = localBody;",
							"    console.log(jsonBody);",
							"    ",
							"    ",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"if(jsonBody){",
							"  ",
							"   ",
							"    var patients = pm.variables.get(\"patients\");",
							"    ",
							"   ",
							"    ",
							"    ",
							"    if(!patients){",
							"         ",
							"        patients = []",
							"    }",
							"    ",
							"    var ids = jsonBody",
							"    ",
							"  ",
							"    ",
							"    newPatient = {",
							"        ",
							"        \"ids\": ids,",
							"        \"fields\":request.data",
							"      ",
							"    }",
							"    ",
							"    ",
							"    ",
							"    patients.push(newPatient);",
							"    pm.collectionVariables.set('patients', patients);",
							"    pm.collectionVariables.set('idString', jsonBody[0].idString);",
							"  ",
							"    ",
							"    ",
							"}",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0749f282-d83b-4fdb-8f91-0eecd14a2384",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "vorname",
							"value": "{{vorname}}",
							"type": "text"
						},
						{
							"key": "nachname",
							"value": "{{nachname}}",
							"type": "text"
						},
						{
							"key": "geburtsname",
							"value": "{{geburtsname}}",
							"type": "text"
						},
						{
							"key": "geburtstag",
							"value": "{{geburtstag}}",
							"type": "text"
						},
						{
							"key": "geburtsmonat",
							"value": "{{geburtsmonat}}",
							"type": "text"
						},
						{
							"key": "geburtsjahr",
							"value": "{{geburtsjahr}}",
							"type": "text"
						},
						{
							"key": "plz",
							"value": "{{plz}}",
							"type": "text"
						},
						{
							"key": "ort",
							"value": "{{ort}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/patients?tokenId={{tokenId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"patients"
					],
					"query": [
						{
							"key": "tokenId",
							"value": "{{tokenId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NEW_TOKEN (addPatient) - Token anlegen",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "86b359ab-74d8-40af-8a34-a1f42c101751",
						"exec": [
							"console.log(\"New TOKEN (addPatient)\")",
							"var jsonBody;",
							"pm.collectionVariables.unset(\"tokenId\");",
							"",
							"",
							"",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"properties\": {",
							"            \"id\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"type\":{",
							"                \"type\": \"string\",",
							"                \"pattern\": \"addPatient\"",
							"            },",
							"            \"data\": {",
							"                \"type\": \"object\",",
							"                 \"required\": [\"idTypes\"]",
							"            },",
							"            \"uri\": {",
							"                \"type\": \"string\"",
							"            }",
							"        }",
							"    };",
							"",
							"",
							"",
							"",
							"pm.test('response must be valid and have a body', function() {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"     ",
							"    ",
							"});",
							"",
							"pm.test(\"response have correct scheme\", function() {",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"    jsonBody = localBody;",
							"    ",
							"});",
							"",
							"pm.test('response header have correct scheme', function(){",
							"    pm.expect(pm.response.headers.has('Location')).to.be.true;",
							"})",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"if(jsonBody){",
							"    var tokenId = jsonBody.id;",
							"    pm.collectionVariables.set(\"tokenId\",tokenId);",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2ddf69ad-8358-4259-9bc3-4871b3d0a5d6",
						"exec": [
							"var externalData =  pm.variables.get('ADD_PATIENTS_DATA');",
							"var patientsPointer = (pm.variables.get('addPatientsPointer'));",
							"",
							"",
							"",
							"",
							"if(typeof(externalData) ==\"object\" && typeof(patientsPointer) == 'number' ){",
							"    ",
							" ",
							"   ",
							"    var patient = externalData[patientsPointer];",
							"    ",
							"   ",
							"    Object.keys(patient).forEach(key=> {",
							"      ",
							"       pm.variables.set(key, patient[key]);",
							"",
							"        ",
							"    });",
							"    ",
							"     ",
							"     ",
							"    ",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"type\": \"addPatient\",\r\n     \t\"data\": {\r\n     \t\t\"idtypes\": [{{idTypes}}]\r\n    \t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/sessions/{{sessionId}}/tokens",
					"host": [
						"{{url}}"
					],
					"path": [
						"sessions",
						"{{sessionId}}",
						"tokens"
					]
				}
			},
			"response": []
		},
		{
			"name": "ADD_PATIENT (JSON) - Patienten anlegen",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7287d753-1a1d-4834-9fc2-9a7b21ea4489",
						"exec": [
							"//Deleting unnecessary keys",
							"var addPatientData =  pm.variables.get('ADD_PATIENTS_DATA');",
							"var addPatientsPointer = pm.variables.get('addPatientsPointer');",
							"",
							"",
							"",
							"if(addPatientData && typeof(addPatientsPointer) === 'number' ){",
							"",
							"    var patient = addPatientData[addPatientsPointer];",
							"    ",
							"   ",
							"    Object.keys(patient).forEach(key=> {",
							"      ",
							"        pm.variables.unset(key);",
							"",
							"        ",
							"    });",
							"    addPatientsPointer++;",
							"    pm.collectionVariables.set('addPatientsPointer', addPatientsPointer);",
							"",
							"",
							"}",
							"//Test begins here",
							"",
							"var jsonBody;",
							"",
							"",
							" var innerArraySchema = {",
							"         \"type\": \"object\",",
							"            \"required\": [\"idType\", \"idString\", \"tentative\", \"uri\"],",
							"            \"properties\":  ",
							"            {",
							"                \"idType\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"idString\":{",
							"                    \"type\": \"string\",",
							"                },",
							"                \"tentative\": {",
							"                    \"type\": \"boolean\",",
							"                },",
							"                \"uri\": {",
							"                    \"type\": \"string\"",
							"                }",
							"            }",
							"        ",
							"    }",
							"",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"type\": \"array\",",
							"       \"items\" : {",
							"                \"#ref\": innerArraySchema",
							"           ",
							"       }};",
							"            ",
							"            ",
							"   ",
							"",
							"",
							"",
							"pm.test('response must be valid and have a body', function() {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"     ",
							"    ",
							"});",
							"",
							"",
							"pm.test(\"response have correct scheme\", function() {",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"    jsonBody = localBody;",
							"    console.log(jsonBody);",
							"    ",
							"    ",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"if(jsonBody){",
							"  ",
							"   ",
							"    var patients = pm.variables.get(\"patients\");",
							"    ",
							"   ",
							"    ",
							"    ",
							"    if(!patients){",
							"         ",
							"        patients = []",
							"    }",
							"    ",
							"    var ids = jsonBody",
							"    ",
							"  ",
							"    ",
							"    newPatient = {",
							"        ",
							"        \"ids\": ids,",
							"        \"fields\":request.data",
							"      ",
							"    }",
							"    ",
							"    ",
							"    ",
							"    patients.push(newPatient);",
							"    pm.collectionVariables.set('patients', patients);",
							"    pm.collectionVariables.set('idString', jsonBody[0].idString);",
							"  ",
							"    ",
							"    ",
							"}",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b5a88e0c-7aa1-4d3f-861a-288aab0c4226",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "vorname",
							"value": "{{vorname}}",
							"type": "text"
						},
						{
							"key": "nachname",
							"value": "{{nachname}}",
							"type": "text"
						},
						{
							"key": "geburtsname",
							"value": "{{geburtsname}}",
							"type": "text"
						},
						{
							"key": "geburtstag",
							"value": "{{geburtstag}}",
							"type": "text"
						},
						{
							"key": "geburtsmonat",
							"value": "{{geburtsmonat}}",
							"type": "text"
						},
						{
							"key": "geburtsjahr",
							"value": "{{geburtsjahr}}",
							"type": "text"
						},
						{
							"key": "plz",
							"value": "{{plz}}",
							"type": "text"
						},
						{
							"key": "ort",
							"value": "{{ort}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/patients?tokenId={{tokenId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"patients"
					],
					"query": [
						{
							"key": "tokenId",
							"value": "{{tokenId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NEW TOKEN(realAllPatiens of idType)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5a519df7-6a34-4452-b8da-640d39948c87",
						"exec": [
							"",
							"var jsonBody;",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"properties\": {",
							"            \"id\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"type\":{",
							"                \"type\": \"string\",",
							"                \"pattern\": \"readPatients\"",
							"            },",
							"            \"data\": {",
							"                \"type\": \"object\",",
							"                ",
							"            },",
							"            \"uri\": {",
							"                \"type\": \"string\"",
							"            }",
							"        }",
							"    };",
							"",
							"",
							"",
							"pm.test('response must be valid and have a body', function() {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"     ",
							"    ",
							"});",
							"",
							"",
							"pm.test(\"response have correct scheme\", function() {",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"    jsonBody = localBody;",
							"    console.log(jsonBody);",
							"    ",
							"    ",
							"});",
							"",
							"",
							"",
							"if(jsonBody){",
							"    var tokenId = jsonBody.id;",
							"    pm.collectionVariables.set('tokenId', tokenId);",
							"    var patients = pm.variables.get('patients');",
							"    var readPatientsPointer = pm.variables.get('readPatientsPointer');",
							"  ",
							"    if(patients){",
							"      searchIdTypes = [\"pid\"];",
							"            ",
							"      var filteredPatients = patients.filter( (patient_x) =>  ",
							"           searchIdTypes.every( searchIdType =>  patient_x.ids.map(patient_id => patient_id.idType).includes(searchIdType)) );",
							"   ",
							"        console.log(filteredPatients)",
							"        ",
							"    ",
							"        var expectedResultLength = filteredPatients.length;",
							"        console.log(\"expectedLength\" + expectedResultLength);",
							"        pm.collectionVariables.set('expectedResultLength', expectedResultLength);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b06ef231-afd8-40fa-8fe9-00cd2427214b",
						"exec": [
							"",
							"var readPatientsData = pm.variables.get('READ_PATIENTS_DATA')",
							"",
							"var readPatientsPointer = pm.variables.get('readPatientsPointer');",
							"    ",
							"    ",
							"",
							"",
							"if(typeof(readPatientsData) ==\"object\" && typeof(readPatientsPointer) == 'number' ){",
							"    ",
							"var data = readPatientsData[readPatientsPointer];",
							"    ",
							"   pm.collectionVariables.set('readPatientBody', JSON.stringify(data));",
							" ",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"type\": \"readPatients\",\r\n \t\"data\": {\r\n\t\t\"searchIds\": [\r\n\t\t\t{\r\n\t\t\t\t\"idType\":\"pid\",\r\n\t\t\t\t\"idString\":\"*\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"resultIds\":[\"pid\"]\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/sessions/{{sessionId}}/tokens",
					"host": [
						"{{url}}"
					],
					"path": [
						"sessions",
						"{{sessionId}}",
						"tokens"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET_PATIENT - Patientenliste lesen (With Wildcard)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "528dff8c-f457-4864-9935-2436d0fcdb85",
						"exec": [
							"console.log(\"GET Patient\")",
							"",
							"//Deleting unnecessary keys",
							"var readPatientData =  pm.variables.get('READ_PATIENTS_DATA');",
							"var readPatientsPointer = pm.variables.get('readPatientsPointer');",
							"",
							"",
							"",
							"if(readPatientData && typeof(readPatientsPointer) === 'number' ){",
							"",
							"    pm.collectionVariables.unset('readPatientBody');",
							"    readPatientsPointer++;",
							"    pm.collectionVariables.set('readPatientsPointer', readPatientsPointer);",
							"",
							"",
							"}",
							"",
							"",
							"//Test begins here",
							"",
							"var jsonBody;",
							"",
							"",
							"",
							"",
							"",
							"",
							" var innerArraySchema = {",
							"         \"type\": \"object\",",
							"            \"required\": [\"idType\", \"idString\", \"tentative\", \"uri\"],",
							"            \"properties\":  ",
							"            {",
							"                \"idType\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"idString\":{",
							"                    \"type\": \"string\",",
							"                },",
							"                \"tentative\": {",
							"                    \"type\": \"boolean\",",
							"                },",
							"               ",
							"            }",
							"        ",
							"    }",
							"",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"type\": \"array\",",
							"       \"items\" : {",
							"                \"#ref\": innerArraySchema",
							"           ",
							"       }};",
							"            ",
							"            ",
							"   ",
							"",
							"",
							"pm.test('response must be valid and have a valid scheme body', function() {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"     ",
							"    ",
							"    ",
							"});",
							"",
							"",
							"",
							"pm.test(\"Check number of results\", function(){",
							"     var localBody = JSON.parse(responseBody);",
							"     pm.expect(localBody).to.have.lengthOf(pm.variables.get('expectedResultLength'))",
							"    ",
							"    ",
							"    ",
							"})",
							"",
							"",
							"",
							"",
							"/*",
							"pm.test(\"Check Patientdata (NOT IMPLEMENTED YET)\", function () {",
							"    var localBody = JSON.parse(responseBody);",
							"    var patients =  JSON.parse(pm.variables.get(\"patients\"));",
							"    ",
							"    console.log(patients);",
							"    console.log(localBody)",
							"    ",
							"    localBody.forEach(responseElement => {",
							"    ",
							"    //Search for corresponding patient",
							"    var patient = patients.find( x_patient =>  x_patient.properties.some(x_property => x_property.idString === responseElement.idString && x_property.idType === responseElement.idType) );",
							"    ",
							"    pm.expect(patient).to.not.be.undefined;",
							"   ",
							"   ",
							"        for(var propt in responseElement){",
							"            ",
							"           pm.expect(patient[\"idType\"]).to.eql(responseElement[propt]);",
							"           ",
							"        }",
							"        ",
							"    });",
							"    ",
							"   ",
							"    jsonBody = localBody;",
							"});",
							"*/",
							"",
							"pm.test('Check PatientID', function () {",
							"    ",
							"    ",
							"    var localBody = JSON.parse(responseBody);",
							"    var patients =  pm.variables.get(\"patients\");",
							"    ",
							"    ",
							"    localBody.forEach( foundPatient => {",
							"    ",
							"    pm.expect(foundPatient).to.have.nested.property('ids[0]');",
							"    pm.expect(foundPatient).to.have.nested.property('ids[0].idType');",
							"    pm.expect(foundPatient).to.have.nested.property('ids[0].idString');",
							"    ",
							"    responseElement = foundPatient.ids[0];",
							"",
							"    //Search for corresponding patient",
							"    var filteredPatients = patients.filter( x_patient => x_patient.ids.some(x_property => x_property.idString === responseElement.idString && x_property.idType === responseElement.idType));",
							"    pm.expect(filteredPatients).to.have.lengthOf(1);",
							"    var patient = filteredPatients[0];",
							"    var patientProperty = patient.ids.find(x => x.idString === responseElement.idString && x.idType === responseElement.idType);",
							"    pm.expect(patientProperty).to.not.be.undefined;",
							"        for(var propt in responseElement){",
							"            pm.expect(patientProperty[propt]).to.eql(responseElement[propt]);",
							"        }",
							"        ",
							"    });",
							"    ",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"url": {
					"raw": "{{url}}/patients/tokenId/{{tokenId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"patients",
						"tokenId",
						"{{tokenId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "NEW TOKEN(realAllPatiens of idType)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ec0278f-a2de-4f55-a950-4771c65d915a",
						"exec": [
							"",
							"var jsonBody;",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"properties\": {",
							"            \"id\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"type\":{",
							"                \"type\": \"string\",",
							"                \"pattern\": \"readPatients\"",
							"            },",
							"            \"data\": {",
							"                \"type\": \"object\",",
							"                ",
							"            },",
							"            \"uri\": {",
							"                \"type\": \"string\"",
							"            }",
							"        }",
							"    };",
							"",
							"",
							"",
							"pm.test('response must be valid and have a body', function() {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"     ",
							"    ",
							"});",
							"",
							"",
							"pm.test(\"response have correct scheme\", function() {",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"    jsonBody = localBody;",
							"    console.log(jsonBody);",
							"    ",
							"    ",
							"});",
							"",
							"",
							"",
							"if(jsonBody){",
							"    var tokenId = jsonBody.id;",
							"    pm.collectionVariables.set('tokenId', tokenId);",
							"    var patients = pm.variables.get('patients');",
							"    var readPatientsPointer = pm.variables.get('readPatientsPointer');",
							"    ",
							"    ",
							"    ",
							"    if(patients){",
							"       ",
							"      searchIdTypes = [\"intid\",\"pid\"];",
							"            ",
							"      var filteredPatients = patients.filter( (patient_x) =>  ",
							"           searchIdTypes.every( searchIdType =>  patient_x.ids.map(patient_id => patient_id.idType).includes(searchIdType)) );",
							"   ",
							"    ",
							"    console.log(filteredPatients)",
							"    ",
							"   ",
							"    var expectedResultLength = filteredPatients.length;",
							"    console.log(\"expectedLength\" + expectedResultLength);",
							"    pm.collectionVariables.set('expectedResultLength', expectedResultLength);",
							"            ",
							"    ",
							"    ",
							"       ",
							"        ",
							"        ",
							"    }",
							"    ",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a360ce5b-beda-40ab-a881-3581c122a5a4",
						"exec": [
							"",
							"var readPatientsData = pm.variables.get('READ_PATIENTS_DATA')",
							"",
							"var readPatientsPointer = pm.variables.get('readPatientsPointer');",
							"    ",
							"    ",
							"",
							"",
							"if(typeof(readPatientsData) ==\"object\" && typeof(readPatientsPointer) == 'number' ){",
							"    ",
							" ",
							"   ",
							"var data = readPatientsData[readPatientsPointer];",
							"    ",
							"   pm.collectionVariables.set('readPatientBody', JSON.stringify(data));",
							" ",
							"",
							"    ",
							"}",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"type\": \"readPatients\",\r\n \t\"data\": {\r\n\t\t\"searchIds\": [\r\n\t\t\t{\r\n\t\t\t\t\"idType\":\"pid\",\r\n\t\t\t\t\"idString\":\"*\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"resultIds\":[\"intid\"]\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/sessions/{{sessionId}}/tokens",
					"host": [
						"{{url}}"
					],
					"path": [
						"sessions",
						"{{sessionId}}",
						"tokens"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET_PATIENT - Patientenliste lesen (With Wildcard)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "53d32fb3-a998-4207-bf20-d3aaef5ecd49",
						"exec": [
							"console.log(\"GET Patient\")",
							"",
							"//Deleting unnecessary keys",
							"var readPatientData =  pm.variables.get('READ_PATIENTS_DATA');",
							"var readPatientsPointer = pm.variables.get('readPatientsPointer');",
							"",
							"",
							"",
							"if(readPatientData && typeof(readPatientsPointer) === 'number' ){",
							"",
							"    pm.collectionVariables.unset('readPatientBody');",
							"    readPatientsPointer++;",
							"    pm.collectionVariables.set('readPatientsPointer', readPatientsPointer);",
							"",
							"",
							"}",
							"",
							"",
							"//Test begins here",
							"",
							"var jsonBody;",
							"",
							"",
							"",
							"",
							"",
							"",
							" var innerArraySchema = {",
							"         \"type\": \"object\",",
							"            \"required\": [\"idType\", \"idString\", \"tentative\", \"uri\"],",
							"            \"properties\":  ",
							"            {",
							"                \"idType\": {",
							"                    \"type\": \"string\"",
							"                },",
							"                \"idString\":{",
							"                    \"type\": \"string\",",
							"                },",
							"                \"tentative\": {",
							"                    \"type\": \"boolean\",",
							"                },",
							"               ",
							"            }",
							"        ",
							"    }",
							"",
							"",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console}),",
							"    schema = {",
							"        \"type\": \"array\",",
							"       \"items\" : {",
							"                \"#ref\": innerArraySchema",
							"           ",
							"       }};",
							"            ",
							"            ",
							"   ",
							"",
							"",
							"pm.test('response must be valid and have a valid scheme body', function() {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var localBody =  pm.response.json();",
							"    pm.expect(ajv.validate(schema, localBody )).to.be.true;",
							"     ",
							"    ",
							"    ",
							"});",
							"",
							"",
							"",
							"pm.test(\"Check number of results\", function(){",
							"     var localBody = JSON.parse(responseBody);",
							"     pm.expect(localBody).to.have.lengthOf(pm.variables.get('expectedResultLength'))",
							"    ",
							"    ",
							"    ",
							"})",
							"",
							"",
							"",
							"",
							"/*",
							"pm.test(\"Check Patientdata (NOT IMPLEMENTED YET)\", function () {",
							"    var localBody = JSON.parse(responseBody);",
							"    var patients =  JSON.parse(pm.variables.get(\"patients\"));",
							"    ",
							"    console.log(patients);",
							"    console.log(localBody)",
							"    ",
							"    localBody.forEach(responseElement => {",
							"    ",
							"    //Search for corresponding patient",
							"    var patient = patients.find( x_patient =>  x_patient.properties.some(x_property => x_property.idString === responseElement.idString && x_property.idType === responseElement.idType) );",
							"    ",
							"    pm.expect(patient).to.not.be.undefined;",
							"   ",
							"   ",
							"        for(var propt in responseElement){",
							"            ",
							"           pm.expect(patient[\"idType\"]).to.eql(responseElement[propt]);",
							"           ",
							"        }",
							"        ",
							"    });",
							"    ",
							"   ",
							"    jsonBody = localBody;",
							"});",
							"*/",
							"",
							"pm.test('Check PatientID', function () {",
							"    ",
							"    ",
							"    var localBody = JSON.parse(responseBody);",
							"    var patients =  pm.variables.get(\"patients\");",
							"    ",
							"    ",
							"    localBody.forEach( foundPatient => {",
							"    ",
							"    pm.expect(foundPatient).to.have.nested.property('ids[0]');",
							"    pm.expect(foundPatient).to.have.nested.property('ids[0].idType');",
							"    pm.expect(foundPatient).to.have.nested.property('ids[0].idString');",
							"    ",
							"    responseElement = foundPatient.ids[0];",
							"",
							"    //Search for corresponding patient",
							"    var filteredPatients = patients.filter( x_patient => x_patient.ids.some(x_property => x_property.idString === responseElement.idString && x_property.idType === responseElement.idType));",
							"    pm.expect(filteredPatients).to.have.lengthOf(1);",
							"    var patient = filteredPatients[0];",
							"    var patientProperty = patient.ids.find(x => x.idString === responseElement.idString && x.idType === responseElement.idType);",
							"    pm.expect(patientProperty).to.not.be.undefined;",
							"        for(var propt in responseElement){",
							"            pm.expect(patientProperty[propt]).to.eql(responseElement[propt]);",
							"        }",
							"        ",
							"    });",
							"    ",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "mainzellisteApiKey",
						"value": "{{mainzellisteApiKey}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "mainzellisteApiVersion",
						"value": "{{mainzellisteApiVersion}}"
					}
				],
				"url": {
					"raw": "{{url}}/patients/tokenId/{{tokenId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"patients",
						"tokenId",
						"{{tokenId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0fac983c-ce93-43be-8b4f-bd9dcb843cc9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "53d10bc2-2cc6-4f82-81a0-01e9c728312c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}