# Template properties for mainzelliste
#
# The configuration listed here provides default values which should be suitable for
# a variety of szenarios. At least, the sections "Database setup" and "xDAT servers"
# should be adjusted to the local environment.

# General format: Key-value pairs, separated by spaces, tabs, "=", ":".
# Lines starting with "#" are comments. Comments appended to a line are not possible!
# See Javadoc for java.util.Properties#load(Reader) for details.

# Property names may contain letters, numbers, underscores and dots. Dots define a hierarchical
# structure on the property names.

# For a comprehensive documentation of configuration parameters see the configuration manual
# ("Konfigurationshandbuch").

# debug mode: If set to true, token handling is disabled (i.e. no tokens are necessary).
debug = false

# Name of this mainzelliste distribution instance.
dist = Mainzelliste

# Database setup

# Uncomment this for PostgreSQL
db.driver = org.postgresql.Driver
#db.url = jdbc:postgresql://localhost:5432/mainzellisteAuditTrail
#db.url = jdbc:postgresql://localhost:5432/mainzelliste7
db.url = jdbc:postgresql://db:5432/mainzelliste

# Uncomment this for MySQL
# db.driver = com.mysql.jdbc.Driver
# db.url = jdbc:mysql://localhost:3306/mainzelliste

db.username = mainzelliste
db.password = PleasePutASafePasswordHere

# Logging
#
# By default, logs are written to stdout. Uncomment the following values to log to a file
# instead.

#log.filename = /var/log/tomcat6/mainzelliste.log
#log.level = DEBUG


#performance tuning soundex-like blocking
#tuning.soundexblocking = false
#blocking.soundex.type = Soundex
#blocking.soundex.fields = vorname, nachname


# GCP Features
#
# Institutions in heavily regulated invironments, for example CROs or other facilities
# working in the field of clinical trials, have to fulfill restrictive requirements
# in terms of logging and comprehensibility whenever data is created, modified or simply viewed.
# (WHO Guidlines for GCP, ICH GCP E6 and others)
# A so-called audit trail is a common feature implemented by systems used to access or modify this
# kind of data.
# It typically stores timestamp, user/system identifier, record name, old value, new value, reason for change and the action taken.
#
# This property activates the mainzelliste audit trail feature which creates a new table in the database
# for storing those records. It further extends the token format to include audit trail information in the 'data' field:
#
# auditTrail: {
#   username: "foo_user",
#   remoteSystem: "bar_system",
#   reasonForChange: "reason"
# }
#
# PLEASE NOTE:
# When this option is active, requests to the system without a valid audit trail object
# inside the access token will be denied.

gcp.audittrail = false

# Field definitions
#
# Every input field must be defined here with field.{fieldname}.type = {fieldtype},
# where fieldname is a unique identifier and fieldtype the name of a subclass of Field.
# Input data from the field will be stored in objects of that class.
#
# Every field defined here must either be contained in the input form
# WEB-INF/jsp/patientFormElements.jsp (with corresponding "name"-Tag) or
# be provided in the createPatient Token

# In order to deactivate fields temporarily, it is sufficient to comment out the field definition.

field.vorname.type = PlainTextField
field.nachname.type = PlainTextField
field.geburtsname.type = PlainTextField
field.geburtstag.type = IntegerField
field.geburtsmonat.type = IntegerField
field.geburtsjahr.type = IntegerField
field.plz.type = PlainTextField
field.ort.type = PlainTextField


# Server-side validation

# validator.field.{fieldname}.required: Whether a field must not be empty
validator.field.vorname.required = true
validator.field.nachname.required = true
validator.field.geburtstag.required = true
validator.field.geburtsmonat.required = true
validator.field.geburtsjahr.required = true

# validator.field.{fieldname}.format: Regular expresssion which a field must adhere to.

# Default: letters, dots, underscores, apostrophes, spaces; at least one letter.
validator.field.vorname.format = [A-Za-zäÄöÖüÜß\\.\\-' ]*[A-Za-zäÄöÖüÜß]+[A-Za-zäÄöÖüÜß\\.\\-' ]*
validator.field.nachname.format = [A-Za-zäÄöÖüÜß\\.\\-' ]*[A-Za-zäÄöÖüÜß]+[A-Za-zäÄöÖüÜß\\.\\-' ]*
validator.field.geburtsname.format = [A-Za-zäÄöÖüÜß\\.\\-' ]*[A-Za-zäÄöÖüÜß]+[A-Za-zäÄöÖüÜß\\.\\-' ]*

# Date validation:
# validator.date.{i}.fields defines a list of fields, separated by commas.
# The date string is formed by concatenation of these fields.
# validator.date.{i}.format: A format definition (see java.text.SimpleDateFormat) by
# which the date string is interpreted. Validation checks if the parsed date is valid.
# Set fields which form the date and the format (when concatenating the fields).
# Multiple dates can be specified by supplying multiple definitions with consecutive
# numbers as {i}

validator.date.0.fields = geburtstag, geburtsmonat, geburtsjahr
validator.date.0.format = ddMMyyyy



# Exchange groups
#
# An exchange group denotes a set of fields whose values are considered interchangeable.
# The matcher (currently only EpilinkMatcher) compares the fields in each exchange group to
# all of its permutations and uses the best matching combination for final decision.
#
# An exchange group is defined by exchangeGroup.{id} = {fieldlist}, where id is a sequential number
# and fieldlist a comma-separated list of field names
exchangeGroup.0 = vorname, nachname, geburtsname

# Field transformations
#
# Transformations for a field {fieldname} are defined by
# field.{fieldname}.transformers = {transformerlist}, where
# transformerlist is a comma-separated list of names of subclasses of FieldTransformer.
#
# The first transformer in the list is applied to the input field as defined in the field definition;
# i.e. the type parameter IN of the first transformer must match the class of the field.
# Every subsequent transformer is applied to the output of its predecessor; i.e. its type parameter IN
# must match type parameter OUT of the preceding transformer.

field.vorname.transformers = StringNormalizer, FirstNameDecomposer
field.nachname.transformers = StringNormalizer, GermanLastNameDecomposer
field.geburtsname.transformers = StringNormalizer, GermanLastNameDecomposer

# field comparators
field.vorname.comparator = NGramComparator
field.nachname.comparator = NGramComparator
field.geburtsname.comparator = NGramComparator

field.geburtstag.comparator = BinaryFieldComparator
field.geburtsmonat.comparator = BinaryFieldComparator
field.geburtsjahr.comparator = BinaryFieldComparator

field.plz.comparator = BinaryFieldComparator
field.ort.comparator = NGramComparator


blockingFields.0 geburtstag, geburtsmonat
blockingFields.0 geburtstag, geburtjahr
blockingFields.0 geburtsmonat, geburtsjahr



# Matcher definition
# Property matcher defines the class name of the matcher to use, which must be a subclass
# of Matcher. Currently only EpilinkMatcher is supported.
matcher = EpilinkMatcher

# Config for Epilink Matcher
#
# matcher.epilink.{fieldname}.frequency: Defines the assumed mean frequency of values
# for field {fieldname}. This corresponds to the u-probability in the Fellegi-Sunter-Model
# and can be estimated by the reciprocal of the number of distinct values (i.e. the
# frequency of "month" is 1 / 12).
matcher.epilink.vorname.frequency = 0.000235
matcher.epilink.nachname.frequency = 0.0000271
matcher.epilink.geburtsname.frequency = 0.0000271

# 1 / 30 (approximate average number of days in a month)
matcher.epilink.geburtstag.frequency = 0.0333
# 1 / 12
matcher.epilink.geburtsmonat.frequency = 0.0833
# example value: birth years for an age range of 35 years (40 - 75).
matcher.epilink.geburtsjahr.frequency = 0.0286

matcher.epilink.plz.frequency = 0.01
matcher.epilink.ort.frequency = 0.01

# matcher.epilink.{fieldname}.error_rate defines the assumed error_rate for
# field {fieldname} (1 - m-probability)
#
# The supplied number stem from the evaluation of a German cancer registry
matcher.epilink.vorname.errorRate = 0.01
matcher.epilink.nachname.errorRate = 0.008
matcher.epilink.geburtsname.errorRate = 0.008
matcher.epilink.geburtstag.errorRate = 0.005
matcher.epilink.geburtsmonat.errorRate = 0.002
matcher.epilink.geburtsjahr.errorRate = 0.004
matcher.epilink.plz.errorRate = 0.04
matcher.epilink.ort.errorRate = 0.04



# matcher.epilink.threshold.match: Defines the minimum weight (in the interval [0,1])
# for which a pair of records is considered a definite match.
#
# matcher.epilink.threshold_non_match: Defines the weight (in the interval [0,1])
# below which a pair of records is considered a definite non-match. Must be less than or equal
# to matcher.epilink.threshold_match.
#
# Record pairs with a weight w with threshold_non_match <= w < threshold_match are
# considered possible matches and lead to a tentative PID.


#matcher.epilink.threshold_match = 0.2
matcher.epilink.threshold_match = 0.95
#matcher.epilink.threshold_non_match = 0.1
matcher.epilink.threshold_non_match = 0.6
#matcher.epilink.threshold_non_match = 0.01



# ID-Generators
#
# idgenerators: A comma-seperated list of identifiers of ID-Generators, corresponding to ID types.
# External id types should be also listed here

# For every generator:
# idgenerator.{identifier}: Class which implements the ID generator.
# additional parameters depend on the ID generator used.
#
idgenerators = pid, intid, extid

# For externally generated id types (imported from external systems) use ExternalIDGenerator
# idgenerators = pid, intid, extid

# Additional params for PIDGenerator (k1, k2, k3, rndwidth) are defined here.
idgenerator.pid = PIDGenerator
idgenerator.pid.k1 = 1
idgenerator.pid.k2 = 2
idgenerator.pid.k3 = 3
# rndwidth is optional (default 0)
idgenerator.pid.rndwidth = 0

idgenerator.intid = SimpleIDGenerator

# For externally generated id types (imported from external systems) use ExternalIDGenerator
idgenerator.extid = ExternalIDGenerator

# Output of result

# Whether to show a result page (defaults to true)
# Set to false if you use a redirect address with "addPatient"-Tokens
# and want the user to be immediately redirected to the calling application.
# Only applicable if a redirect address is defined in a token
result.show = true

# Whether to include Idat in the result page.
result.printIdat = true

# Set a fixed language for the user interface. Must be a language code for which a
# MessageBundle exists in the application. Current valid values are "en" and "de"
# language =

# xDAT servers
#
# Known Permissions / Token Types:
#
# - showSessionIds: see own sessions via GET /sessions
# - createSession: create session via POST /sessions
#
# - createToken: create tokens -- in addition, permission "tt_x" is req'd, where x is one of these TOKEN TYPES:
#   - tt_addPatient: allows to generate one (1) ID. Token is invalidated afterwards even if an existing ID was returned.
#	- tt_readPatients: allows to read IDAT or pseudonyms of patients
#   - tt_editPatient: allows to change identifying data of one (1) patient. Token is invalidated afterwards.
#servers.0.apiKey = h0chK0mPleXeRKEY12345
#servers.0.apiKey = changeThisApiKey
#servers.0.allowedRemoteAdresses = 0.0.0.0/0
#servers.0.permissions = createSession;createToken;tt_readPatients;
#users.0.permissions = createSession;showSessionIds;createToken;tt_addPatient;tt_readPatients;tt_editPatient
#users.0.oauth.claims.subs = 123

oidc.auth0.iss=https://dev-ptsul9wq.eu.auth0.com/
oidc.invalid.iss=https://dfdsfdsfds.com/

claims.0.permissions = createToken;tt_addPatient;tt_readPatients;tt_editPatient
claims.0.auth=OIDC
claims.0.oidc.operator=AND
claims.0.oidc.iss=auth0
claims.0.oidc.sub=auth0|5f026a16920eff001996f9a5

claims.1.permissions = createSession;showSessionIds
claims.1.auth=OIDC
claims.1.oidc.operator=AND
claims.1.oidc.iss=auth0
claims.1.oidc.http\://mainzelliste.de/roles=admin


#claims.2.permissions = createSession;showSessionIds
#claims.2.auth=OIDC
#claims.2.oidc.operator=AND
#claims.2.oidc.iss=invalid
#claims.2.oidc.http\://mainzelliste.de/roles=admin


#servers.1.apiKey = h0chK0mPleXeRKEY98765
#servers.1.allowedRemoteAdresses = 192.168.56.26;127.0.0.1
#servers.1.permissions = createSession;createToken; tt_readPatients




# A passphrase used for authentication
#servers.0.apiKey = sesam;test
#servers.0.permissions = createSession;showSessionIds;createToken;tt_deletePatient;tt_addPatient;tt_readPatients;tt_editPatient;tt_deleteAllPatients;readAllPatientIdTypes;readAllPatientIds;tt_readPatients


# Accepted origin addresses (IPv4 and/or IPv6) or address ranges in CIDR notation (IPv4 only)

# Allow only requests from localhost (e.g. for developing)
#servers.0.allowedRemoteAdresses = 127.0.0.1;0:0:0:0:0:0:0:1


#servers.1.apiKey = notAllowedServer
#servers.1.permissions = createSession;showSessionIds;createToken;tt_deletePatient;tt_addPatient;tt_readPatients;tt_editPatient;tt_deleteAllPatients
#servers.1.allowedRemoteAdresses = 172.19.255.255;127.0.0.1;0:0:0:0:0:0:0:1


# Allow requests from a typical private network
# servers.0.allowedRemoteAdresses = 192.168.56.0/24

# Allow combination of both
# servers.0.allowedRemoteAdresses = 127.0.0.1;0:0:0:0:0:0:0:1;192.168.56.0/24

# Allowed origins for cross origin resource sharing (CORS), multiple values separated by ";"

# servers.allowedOrigins = https://mdat-server.example.org

# Allowed Format of callback
callback.allowedFormat = https://.*
callback.allowSelfsigned = false

# Session timeout
# A session will be deleted if not accessed for this amount of time, specified in minutes
# Default value if not specified: 10
# sessionTimeout = 10

# Operator information of the Mainzelliste operator to display around user forms
# (defaults to empty/invisible):
# - Contact: Text to be displayed below all forms
# - Logo: Path to image to be displayed in the upper right corner. This can either be an absolute path
#         in the file system, a path within the .war file or a path relative to META-INF/resource
#         within a .jar file on the class path (e.g. a dependency).

# operator.contact =

# Logo file: example for absolute path
# operator.logo = /etc/mainzelliste/logo.png

# Logo file: example for relative path in .war file
# operator.logo = /WEB-INF/classes/logo.png

# Logo file: example for file in META-INF/resources within a .jar file on the classpath
# operator.logo = /logo.png
